ConcurrentHashMap ConcurrentHashMap class is introduced in JDK 1.5, which implements ConcurrentMap as well as Serializable interface also. 
ConcureentHashMap is enhancement of HashMap as we know that while dealing with Threads in our application HashMap is not a good choice because
 performance wise HashMap is not upto the mark.

Key points of ConcurrentHashMap:

The underlined data structure for ConcurrentHashMap is Hashtable.

ConcurrentHashMap class is thread-safe i.e. multiple thread can operate on a single object without any complications.

At a time any number of threads are applicable for read operation without locking the ConcurrentHashMap object which is not there in HashMap.

In ConcurrentHashMap, the Object is divided into number of segments according to the concurrency level.

Default concurrency-level of ConcurrentHashMap is 16.

In ConcurrentHashMap, at a time any number of threads can perform retrieval operation but for updation in object, thread must lock the particular
 segment in which thread want to operate.This type of locking mechanism is known as Segment locking or bucket locking.Hence at a time 16 updation
 operations can be performed by threads.
 
null insertion is not possible in ConcurrentHashMap as key or value.

Constructors of ConcurrentHashMap:


ConcurrentHashMap m=new ConcurrentHashMap();:Creates a new, empty map with a default initial capacity (16), load factor (0.75) and concurrencyLevel (16).

ConcurrentHashMap m=new ConcurrentHashMap(int initialCapacity);:Creates a new, empty map with the specified initial capacity, and with default load factor (0.75)
 and concurrencyLevel (16).
ConcurrentHashMap m=new ConcurrentHashMap(int initialCapacity, float loadFactor);:
Creates a new, empty map with the specified initial capacity and load factor and with the default concurrencyLevel (16).

ConcurrentHashMap m=new ConcurrentHashMap(int initialCapacity, float loadFactor, int concurrencyLevel);:Creates a new,
 empty map with the specified initial capacity, load factor and concurrency level.
 
ConcurrentHashMap m=new ConcurrentHashMap(Map m);:Creates a new map with the same mappings as the given map.
filter_none



ConcureentHashMap uses RE-ENTRANT LOCK --- 

	The ReentrantLock class implements the Lock interface and provides synchronization to methods while accessing shared resources.
	The code which manipulates the shared resource is surrounded by calls to lock and unlock method. 
	This gives a lock to the current working thread and blocks all other threads which are trying to take a lock on the shared resource.

As the name says, ReentrantLock allow threads to enter into lock on a resource more than once. 
When the thread first enters into lock, a hold count is set to one. Before unlocking the thread can re-enter 
into lock again and every time hold count is incremented by one. For every unlock request, hold count is decremented 
by one and when hold count is 0, the resource is unlocked.

Reentrant Locks also offer a fairness parameter, by which the lock would abide by the order of the lock request i.e.
 after a thread unlocks the resource, the lock would go to the thread which has been waiting for the longest time. 
 This fairness mode is set up by passing true to the constructor of the lock.






