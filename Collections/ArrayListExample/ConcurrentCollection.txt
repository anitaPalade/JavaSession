Most collections are not thread safe hence inconsistent data problem may arise.
Hence we use concurrent collection.



CopyOnWriteArrayList in java
CopyOnWriteArrayList: CopyOnWriteArrayList class is introduced in JDK 1.5, which implements List interface.
It is enhanced version of ArrayList in which all modifications (add, set, remove, etc) are implemented by making a fresh copy.

Constructors Summary:

CopyOnWriteArrayList c = new CopyOnWriteArrayList(); :Creates an empty list.
CopyOnWriteArrayList c = new CopyOnWriteArrayList(Collection obj);:Creates a list containing the elements of the specified collection,
																	in the order they are returned by the collectionâ€™s iterator.
CopyOnWriteArrayList c = new CopyOnWriteArrayList(Object[] obj);:Creates a list holding a copy of the given array.


As the name indicates, CopyOnWriteArrayList creates a Cloned copy of underlying ArrayList, 
for every update operation at certain point both will be synchronized automatically ,which is taken care by JVM.

Therefore there is no effect for threads which are performing read operation.

It is costly to use because for every update operation a cloned copy will be created. 

Hence CopyOnWriteArrayList is the best choice if our frequent operation is read operation.

It extends object and implements Serializable, Cloneable, Iterable<E>, Collection<E>, List<E> and RandomAccess

The underlined data structure is grow-able array.

It is thread-safe version of ArrayList.

Insertion is preserved, duplicates are allowed and heterogeneous Objects are allowed.

The main important point about CopyOnWriteArrayList is Iterator of CopyOnWriteArrayList can not perform remove operation otherwise we 
get Run-time exception saying UnsupportedOperationException.