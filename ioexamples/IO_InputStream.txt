INPUTSTREAM

InputStream class is the superclass of all the io classes i.e. representing an input stream of bytes.
 It represents input stream of bytes. Applications that are defining subclass of InputStream must provide method, returning the next byte of input.
A reset() method is invoked which re-positions the stream to the recently marked position.

Declaration :

public abstract class InputStream
   extends Object
      implements Closeable
Constructor :

InputStream() : Single Constructor

	mark() : Java.io.InputStream.mark(int arg) marks the current position of the input stream. 
			 It sets readlimit i.e. maximum number of bytes that can be read before mark position becomes invalid.
		Syntax : public void mark(int arg)
		Parameters :
			arg : integer specifying the read limit of the input Stream

	read() : java.io.InputStream.read() reads next byte of data from the Input Stream. The value byte is returned in the range 0 to 255. If no byte is available because the end of the stream has been reached, the value -1 is returned.
		Syntax : public abstract int read()
 	
		Return : Reads next data else, -1 i.e. when end of file is reached.
		Exception :
		->  IOException : If I/O error occurs.
		
	close() : java.io.InputStream.close() closes the input stream and releases system resources associated with this stream to Garbage Collector.
		Syntax : public void close()
	
	
	read() : Java.io.InputStream.read(byte[] arg) reads number of bytes of arg.length from the input stream to the buffer array arg. The bytes read by read() method are returned as int. If len is zero, then no bytes are read and 0 is returned; otherwise, there is an attempt to read at least one byte.
		
		Syntax : public int read(byte[] arg)
		Parameters :
				arg : array whose number of bytes to be read
		Return : 
				reads number of bytes and return to the buffer else, -1 i.e. when end of file is reached.
		Exception :
		->  IOException : If I/O error occurs.
		->  NullPointerException : if arg is null.
	
	reset() : Java.io.InputStream.reset() is invoked by mark() method. It repositions the input stream to the marked position.
		
		Syntax : public void reset()
		
	markSupported() : Java.io.InputStream.markSupported() method tests if this input stream supports the mark and reset methods. The markSupported method of InputStream returns false by default.
		Syntax : public boolean markSupported()

	Return : 
			true if input stream supports the mark() and reset() method  else,false
	
	skip() : Java.io.InputStream.skip(long arg) skips and discards arg bytes in the input stream.
		Syntax : public long skip(long arg)
		Parameters :
				arg : no. of bytes to be skipped
		Return : 
			skip bytes.
			


OUTPUTSTREAM
	
	This abstract class is the superclass of all classes representing an output stream of bytes. 
	An output stream accepts output bytes and sends them to some sink.
	Applications that need to define a subclass of OutputStream must always provide at least a method that writes one byte of output.

	Constructor and Description

		OutputStream() : Single Constructor
		
	void close() : Closes this output stream and releases any system resources associated with this stream.
		Syntax :public void close() throws IOException


	void flush() : Flushes this output stream and forces any buffered output bytes to be written out.
		Syntax :public void flush() throws IOException

	void write(byte[] b) : Writes b.length bytes from the specified byte array to this output stream.
		Syntax :public void write(byte[] b) throws IOException
		Parameters:b - the data.

	void write(byte[] b, int off, int len) : Writes len bytes from the specified byte array starting at offset off to this output stream.
		Syntax :public void write(byte[] b,int off,int len) throws IOException
		Parameters: b - the data.
					off - the start offset in the data.
					len - the number of bytes to write.

	abstract void write(int b) : Writes the specified byte to this output stream.
		Syntax :public abstract void write(int b) throws IOException
		Parameters:
			b - the byte.
